{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gregbarbosa/projects/streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  componentWillUnmount() {\n    this.player.destroy();\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const {\n      id\n    } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 20\n      }, this);\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.videoRef,\n        style: {\n          width: '100%'\n        },\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/gregbarbosa/projects/streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","match","params","id","buildPlayer","componentDidUpdate","componentWillUnmount","player","destroy","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,WAAR,QAA2B,eAA3B;;AAGA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAErCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,QAAL,gBAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,SAAKH,KAAL,CAAWJ,WAAX,CAAuB,KAAKI,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACA,SAAKC,WAAL;AAEH;;AAEDC,EAAAA,kBAAkB,GAAE;AAChB,SAAKD,WAAL;AACH;;AAEDE,EAAAA,oBAAoB,GAAE;AAClB,SAAKC,MAAL,CAAYC,OAAZ;AACH;;AAEDJ,EAAAA,WAAW,GAAE;AACT,QAAG,KAAKG,MAAL,IAAe,CAAC,KAAKV,KAAL,CAAWY,MAA9B,EAAqC;AACjC;AACH;;AAED,UAAM;AAACN,MAAAA;AAAD,QAAO,KAAKN,KAAL,CAAWI,KAAX,CAAiBC,MAA9B;AACA,SAAKK,MAAL,GAAchB,GAAG,CAACmB,YAAJ,CAAiB;AAC3BC,MAAAA,IAAI,EAAE,KADqB;AAE3BC,MAAAA,GAAG,EAAG,8BAA6BT,EAAG;AAFX,KAAjB,CAAd;AAKA,SAAKI,MAAL,CAAYM,kBAAZ,CAA+B,KAAKf,QAAL,CAAcgB,OAA7C;AACA,SAAKP,MAAL,CAAYQ,IAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAG,CAAC,KAAKnB,KAAL,CAAWY,MAAf,EAAsB;AAClB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,UAAM;AAACQ,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAuB,KAAKrB,KAAL,CAAWY,MAAxC;AACA,wBACI;AAAA,8BACI;AAAO,QAAA,GAAG,EAAE,KAAKX,QAAjB;AAA2B,QAAA,KAAK,EAAG;AAACqB,UAAAA,KAAK,EAAE;AAAR,SAAnC;AAAoD,QAAA,QAAQ;AAA5D;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAjDoC;;AAkDxC;;AAED,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAoB;AACxC,SAAO;AAAEb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACrB,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACH,CAFD;;AAIA,eAAeX,OAAO,CAAC4B,eAAD,EAAkB;AAAE3B,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from 'react';\nimport flv from 'flv.js'\nimport { connect } from 'react-redux';\nimport{ fetchStream } from '../../actions';\n\n\nclass StreamShow extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.videoRef = React.createRef();\n    }\n\n    componentDidMount(){\n        this.props.fetchStream(this.props.match.params.id);\n        this.buildPlayer();\n\n    }\n\n    componentDidUpdate(){\n        this.buildPlayer();\n    }\n\n    componentWillUnmount(){\n        this.player.destroy();\n    }\n\n    buildPlayer(){\n        if(this.player || !this.props.stream){\n            return;\n        }\n       \n        const {id} = this.props.match.params;\n        this.player = flv.createPlayer({\n            type: 'flv',\n            url: `http://localhost:8000/live/${id}.flv`\n        });\n\n        this.player.attachMediaElement(this.videoRef.current);\n        this.player.load();\n    }\n\n    render(){\n        if(!this.props.stream){\n            return <div>Loading...</div>;\n        }\n        const {title, description} = this.props.stream;\n        return (\n            <div>\n                <video ref={this.videoRef} style={ {width: '100%'}} controls/>\n                <h1>{title}</h1>\n                <h5>{description}</h5>\n            </div>\n        );\n        \n    }\n};\n\nconst mapStateToProps = (state, ownProps) =>{\n    return { stream: state.streams[ownProps.match.params.id]};\n}\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);"]},"metadata":{},"sourceType":"module"}
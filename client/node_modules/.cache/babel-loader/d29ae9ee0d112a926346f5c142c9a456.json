{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gregbarbosa/projects/streams/client/src/components/streams/StreamEdit.js\";\nimport _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream, editStream } from '../../actions';\nimport StreamForm from './StreamForm';\nimport { formValues } from 'redux-form';\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.editStream(this.props.match.params.id, formValues);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit a Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StreamForm, {\n        initialValues: _.pick(this.props.stream, 'title', 'description'),\n        onSubmit: this.onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["/Users/gregbarbosa/projects/streams/client/src/components/streams/StreamEdit.js"],"names":["_","React","connect","fetchStream","editStream","StreamForm","formValues","StreamEdit","Component","onSubmit","props","match","params","id","componentDidMount","render","stream","pick","mapStateToProps","state","ownProps","streams"],"mappings":";;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAuBC,UAAvB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;;AAGA,MAAMC,UAAN,SAAyBN,KAAK,CAACO,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAMrCC,QANqC,GAMzBH,UAAD,IAAgB;AACvB,WAAKI,KAAL,CAAWN,UAAX,CAAsB,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA9C,EAAkDP,UAAlD;AACH,KARoC;AAAA;;AAErCQ,EAAAA,iBAAiB,GAAE;AACf,SAAKJ,KAAL,CAAWP,WAAX,CAAuB,KAAKO,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACH;;AAMDE,EAAAA,MAAM,GAAE;AAEJ,QAAG,CAAC,KAAKL,KAAL,CAAWM,MAAf,EAAsB;AAClB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAY,QAAA,aAAa,EAAEhB,CAAC,CAACiB,IAAF,CAAO,KAAKP,KAAL,CAAWM,MAAlB,EAA0B,OAA1B,EAAmC,aAAnC,CAA3B;AAA8E,QAAA,QAAQ,EAAE,KAAKP;AAA7F;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AArBoC;;AAuBxC;;AAED,MAAMS,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AAAEJ,IAAAA,MAAM,EAAEG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACT,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAV,GAAP;AACH,CAFD;;AAIA,eAAeX,OAAO,CAACgB,eAAD,EAAiB;AAAEf,EAAAA,WAAF;AAAcC,EAAAA;AAAd,CAAjB,CAAP,CAAoDG,UAApD,CAAf","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream , editStream} from '../../actions';\nimport StreamForm from './StreamForm';\nimport { formValues } from 'redux-form';\n\n\nclass StreamEdit extends React.Component {\n\n    componentDidMount(){\n        this.props.fetchStream(this.props.match.params.id);\n    }\n\n    onSubmit = (formValues) => {\n        this.props.editStream(this.props.match.params.id, formValues);\n    }\n\n    render(){\n\n        if(!this.props.stream){\n            return <div>Loading...</div>\n        }\n        return (\n            <div>\n                <h3>Edit a Stream</h3>\n                <StreamForm initialValues={_.pick(this.props.stream, 'title', 'description')} onSubmit={this.onSubmit} />\n            </div>\n        );\n    }\n\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    return { stream: state.streams[ownProps.match.params.id]}\n};\n\nexport default connect(mapStateToProps,{ fetchStream,editStream })(StreamEdit);\n"]},"metadata":{},"sourceType":"module"}